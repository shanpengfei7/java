package com.pnfy.tankwar.picture;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class Tank {
	/**
	 * 坦克的速度
	 * 
	 */
	public static final int XSPEED =5;
	public static final int YSPEED =5;
	/**
	 * 坦克的血量
	 */
	private int bloodvalue = 100;
	/**
	 * 坦克是否活着
	 */
	
	private boolean live = true;
	
	public boolean isLive() {
		return live;
	}

	public void setLive(boolean live) {
		this.live = live;
	}
	
	/**
	 * 血量条
	 */
	private BloodBar bb = new BloodBar();

	/**
	 * 血量值
	 */
	private int life = 100;	

	public void setLife(int life) {
		this.life = life;
	}

	public int getLife() {
		return life;
	}
	
	/**
	 * 大管家
	 */
	TankClient tc;	
	/**
	 * 判断敌我
	 */
	
	private boolean good;
	
	public boolean isGood() {
		return good;
	}
	
	/**
	 * 坦克位置变量
	 */
	private int x, y;
	private int oldx, oldy;
	
	/**
	 * 敌人坦克行走随机值
	 */
	
	private static Random r = new Random();
	
	/**
	 * 是否行走
	 */
	
	private boolean bL=false, bR=false, bU=false, bD=false;
	
	/**
	 * 刚开始时坦克方向和炮筒方向
	 */
	
	private Direction dir = Direction.STOP;
	private Direction ptDir = Direction.D;
	
	/**
	 * 敌方坦克随机行走
	 */
	private int step = r.nextInt(12) +3;
	/**
	 * 图片放置（坦克方向）
	 */
	private static Toolkit tk = Toolkit.getDefaultToolkit();
	
	private static Image[] tankImages = null;
	private static Map<String, Image> imgs = new HashMap<String, Image>();
	static {
		 tankImages = new Image[] {
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankL.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankLU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankRU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankR.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankRD.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankD.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("Images/tankLD.gif")),
		};
		 
		 imgs.put("L", tankImages[0]);
		 imgs.put("LU", tankImages[1]);
		 imgs.put("U", tankImages[2]);
		 imgs.put("RU", tankImages[3]);
		 imgs.put("R", tankImages[4]);
		 imgs.put("RD", tankImages[5]);
		 imgs.put("D", tankImages[6]);
		 imgs.put("LD", tankImages[7]);		
	}
	
	/**
	 * 坦克图片大小
	 */
	public static final int WIDTH =50;
	public static final int HEIGHT =50;
	/**
	 * 构造方法的使用
	 * @param x
	 * @param y
	 * @param good
	 */
	public Tank(int x, int y, boolean good) {
		this.x = x;
		this.y = y;
		this.oldx = x;
		this.oldy = y;
		this.good = good;
	}
	
	public Tank(int x, int y, Boolean good, Direction dir, TankClient tc) {
		this(x, y, good);
		this.dir = dir;
		this.tc = tc;
	}
	
	/**
	 * 画出坦克
	 * @param g
	 */
	public void draw(Graphics g) {
		if(!live) {
			if(!good) {
				tc.tanks.remove(this);
			}
			return;
		}
		
				
		if(good) bb.draw(g);
	
		switch (ptDir) {
			case L:
				g.drawImage(imgs.get("L"), x, y, null);
				break;
			case LU:
				g.drawImage(imgs.get("LU"), x, y, null);
				break;
			case U:
				g.drawImage(imgs.get("U"), x, y, null);
				break;
			case RU:
				g.drawImage(imgs.get("RU"), x, y, null);
				break;
			case R:
				g.drawImage(imgs.get("R"), x, y, null);
				break;
			case RD:
				g.drawImage(imgs.get("RD"), x, y, null);
				break;
			case D:
				g.drawImage(imgs.get("D"), x, y, null);
				break;
			case LD:
				g.drawImage(imgs.get("LD"), x, y, null);
				break;
		default:
			break;
		}
			
		move();
	}
	
	
	void move() {		
		this.oldx = x;
		this.oldy = y;
		
		switch (dir) {
			case L:
				x -= XSPEED;
				break;
			case LU:
				x -= XSPEED;
				y -= YSPEED;
				break;
			case U:
				y -= XSPEED;		
				break;
			case RU:
				x += XSPEED;
				y -= YSPEED;
				break;
			case R:
				x += XSPEED;				
				break;
			case RD:
				x += XSPEED;
				y += YSPEED;
				break;
			case D:			
				y += YSPEED;			
				break;
			case LD:
				x -= XSPEED;
				y += YSPEED;
				break;
			case  STOP:			
				break;	
		}
		
		if(this.dir != Direction.STOP) {
			this.ptDir = this.dir;
		}
				
		if(x < 10) x = 10;
		if(y < 30) y = 30;
		if(x + Tank.WIDTH > TankClient.Game_Width) x = TankClient.Game_Width - Tank.WIDTH;
		if(y + Tank.HEIGHT > TankClient.Game_Height) y = TankClient.Game_Height - Tank.WIDTH;
				
		if(!good) {
			Direction[] dirs = Direction.values();
			if(step == 0) {
				step = r.nextInt(12) +3;
				int rn = r.nextInt(dirs.length);
				dir = dirs[rn];			
			}
		
			step --;
			
			if(r.nextInt(40)>38)this.fire();
		}
	}

	
	private void stay() {
		x = oldx;
		y = oldy;
	}

	
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		switch (key) {
			case KeyEvent.VK_CONTROL:
				fire();
				break;
			case KeyEvent.VK_LEFT:
				bL = true;
				break;
			case KeyEvent.VK_UP:
				bU=true;
				break;
			case KeyEvent.VK_RIGHT:
				bR=true;
				break;
			case KeyEvent.VK_DOWN:
				bD=true;
				break;
			case KeyEvent.VK_F2:			
				this.live = true;
				this.life = bloodvalue;
				break;			
		}
		
		locateDirection();
	}
	
	
	void locateDirection( ) {
		if(bL && !bU && !bR && !bD) dir = Direction.L;
		else if(bL && bU && !bR && !bD) dir = Direction.LU;
		else if(!bL && bU && !bR && !bD) dir = Direction.U;
		else if(!bL && bU && bR && !bD) dir = Direction.RU;
		else if(!bL && !bU && bR && !bD) dir = Direction.R;
		else if(!bL && !bU && bR && bD) dir = Direction.RD;
		else if(!bL && !bU && !bR && bD) dir = Direction.D;
		else if(bL && !bU && !bR && bD) dir = Direction.LD;
		else if(!bL && !bU && !bR && !bD) dir = Direction.STOP;
	}

	
	public void KeyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		switch (key) {		
			case KeyEvent.VK_LEFT:
				bL = false;
				break;
			case KeyEvent.VK_UP:
				bU=false;
				break;
			case KeyEvent.VK_RIGHT:
				bR=false;
				break;
			case KeyEvent.VK_DOWN:
				bD=false;
				break;
			case KeyEvent.VK_A:
				superFire();
				break;			
		}
		
		locateDirection();		
	}


	public Missile fire() {
		if(!live) return null;
		int x = this.x + Tank.WIDTH/2 - Missile.WIDTH/2;
		int y = this.y + Tank.HEIGHT/2 - Missile.HEIGHT/2;
		Missile m = new Missile(x, y, good, ptDir, this.tc);
		tc.missiles.add(m);
		return m;
	}
	
	public Missile fire(Direction dir) {
		if(!live) return null;
		int x = this.x + Tank.WIDTH/2 - Missile.WIDTH/2;
		int y = this.y + Tank.HEIGHT/2 - Missile.HEIGHT/2;
		Missile m = new Missile(x, y, good, dir, this.tc);
		tc.missiles.add(m);
		return m;
	}
	
	
	public Rectangle getRect() {
		return new Rectangle(x, y, WIDTH, HEIGHT);
	}
	
	
	public boolean collidesWithWall(Wall w) {
		if(this.live && this.getRect().intersects(w.getRect()) ) {
			this.stay();
			return true;
		}
		return false;
	}
	
	
	public boolean collidesWithTanks(java.util.List<Tank> tanks) {
		for(int i=0; i<tanks.size(); i ++) {
			Tank t = tanks.get(i);
			if(this != t) {
				if(this.live && this.getRect().intersects(t.getRect()) ) {
					this.stay();
					return true;
				}				
			}
		}
		return false;
	}
	

	private void superFire() {
		Direction[] dirs = Direction.values();
		for(int i=0; i<8; i++) {
			fire(dirs[i]);
		}
	}
	
	
	private class BloodBar {
		public void draw(Graphics g) {
			Color c = g.getColor();
			g.setColor(Color.YELLOW);
			g.drawRect(x, y-10, WIDTH, 10);
			int w = WIDTH * life / 100;
			g.fillRect(x, y-10, w, 10);
			g.setColor(c);
		}
	}
	
	
	public boolean eat(Blood b) {
		if(this.live && b.isLive() && this.getRect().intersects(b.getReat()) ) {
			this.life = bloodvalue;
			b.setLive(false);
			return true;
		}
		return false;
	}
}


























